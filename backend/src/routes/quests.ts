import express, { Response } from 'express';
import { body, validationResult } from 'express-validator';
import { dbHelpers } from '../database';
import { authenticateToken, AuthRequest } from '../middleware/auth';
import { generateQuest } from '../services/gemini';
import { Quest } from '../types';

const router = express.Router();

/**
 * POST /api/quests/generate
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI (Gemini)
 */
router.post('/generate', authenticateToken, async (req: AuthRequest, res: Response) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    const user = await dbHelpers.findUserById(req.userId!);

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const interests = user.interests || [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini AI
    const quest = await generateQuest({
      city: user.city || '–ú–æ—Å–∫–≤–∞',
      interests,
      isPro: user.is_pro === 1
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–≤–µ—Å—Ç –≤ –±–∞–∑—É
    const savedQuest = await dbHelpers.createQuest({
      title: quest.title,
      description: quest.description,
      tasks: quest.tasks,
      reward: quest.reward,
      category: quest.category || '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
      difficulty: quest.difficulty || 'medium',
      is_pro: user.is_pro ? 1 : 0,
      estimated_time: quest.estimated_time || 60,
      created_by_ai: 1
    });

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∫–≤–µ—Å—Ç
    await dbHelpers.createUserQuest({
      user_id: req.userId!,
      quest_id: savedQuest.id,
      status: 'assigned',
      points_earned: 0
    });

    res.json({
      success: true,
      quest: {
        id: savedQuest.id,
        ...quest
      }
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞:', error);
    // –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç
    try {
      const fallbackQuest = {
        title: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç –¥–Ω—è',
        description: '–°–µ–≥–æ–¥–Ω—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å AI, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–π –∫–≤–µ—Å—Ç –¥–ª—è –≤–∞—Å!',
        tasks: [
          '–ù–∞–π–¥–∏—Ç–µ —Å–∞–º–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ—Å—Ç–æ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ',
          '–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö',
          '–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–æ–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º'
        ],
        reward: '–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è!',
        category: '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
        difficulty: 'easy',
        estimated_time: 60
      };
      
      res.json({
        success: true,
        quest: fallbackQuest
      });
    } catch (fallbackError) {
      res.status(500).json({ 
        error: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–≤–µ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        details: error.message 
      });
    }
  }
});

/**
 * GET /api/quests/history
 * –ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/history', authenticateToken, async (req: AuthRequest, res: Response) => {
  try {
    const userQuests = await dbHelpers.findUserQuests(req.userId!);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–∞—Ö
    const history = await Promise.all(
      userQuests.map(async (uq) => {
        const quest = await dbHelpers.findQuestById(uq.quest_id);
        return {
          user_quest_id: uq.id,
          status: uq.status,
          started_at: uq.started_at,
          completed_at: uq.completed_at,
          points_earned: uq.points_earned,
          quest_id: quest?.id,
          title: quest?.title,
          description: quest?.description,
          tasks: quest?.tasks,
          reward: quest?.reward,
          category: quest?.category,
          difficulty: quest?.difficulty
        };
      })
    );

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    history.sort((a, b) => 
      new Date(b.started_at).getTime() - new Date(a.started_at).getTime()
    );

    res.json({
      history: history.slice(0, 50) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * GET /api/quests/:id
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–≤–µ—Å—Ç
 */
router.get('/:id', authenticateToken, async (req: AuthRequest, res: Response) => {
  try {
    const questId = parseInt(req.params.id);
    const quest = await dbHelpers.findQuestById(questId);

    if (!quest) {
      return res.status(404).json({ error: '–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userQuest = await dbHelpers.findUserQuestByIds(req.userId!, questId);

    res.json({
      quest: {
        ...quest,
        status: userQuest?.status,
        started_at: userQuest?.started_at,
        completed_at: userQuest?.completed_at,
        points_earned: userQuest?.points_earned
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * POST /api/quests/:id/complete
 * –û—Ç–º–µ—Ç–∏—Ç—å –∫–≤–µ—Å—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
 */
router.post('/:id/complete', authenticateToken, async (req: AuthRequest, res: Response) => {
  try {
    const questId = parseInt(req.params.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–≤–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userQuest = await dbHelpers.findUserQuestByIds(req.userId!, questId);

    if (!userQuest || userQuest.status === 'completed') {
      return res.status(404).json({ error: '–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const points = 100; // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –∫–≤–µ—Å—Ç
    await dbHelpers.updateUserQuest(userQuest.id, {
      status: 'completed',
      completed_at: new Date().toISOString(),
      points_earned: points
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await checkAndUnlockAchievements(req.userId!);

    res.json({
      success: true,
      message: '–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!',
      points_earned: points
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * POST /api/quests/:id/skip
 * –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–≤–µ—Å—Ç
 */
router.post('/:id/skip', authenticateToken, async (req: AuthRequest, res: Response) => {
  try {
    const questId = parseInt(req.params.id);

    const userQuest = await dbHelpers.findUserQuestByIds(req.userId!, questId);

    if (!userQuest || userQuest.status !== 'assigned') {
      return res.status(404).json({ error: '–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    await dbHelpers.updateUserQuest(userQuest.id, {
      status: 'skipped',
      skipped_at: new Date().toISOString()
    });

    res.json({
      success: true,
      message: '–ö–≤–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–≤–µ—Å—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * GET /api/quests/categories
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
router.get('/categories', (req, res: Response) => {
  const categories = [
    { id: 'food', name: '–ï–¥–∞', icon: 'üçî' },
    { id: 'sport', name: '–°–ø–æ—Ä—Ç', icon: '‚öΩ' },
    { id: 'art', name: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', icon: 'üé®' },
    { id: 'travel', name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', icon: '‚úàÔ∏è' },
    { id: 'photo', name: '–§–æ—Ç–æ', icon: 'üì∏' },
    { id: 'communication', name: '–û–±—â–µ–Ω–∏–µ', icon: 'üí¨' },
    { id: 'kindness', name: '–î–æ–±—Ä–æ—Ç–∞', icon: 'üíö' },
    { id: 'adventure', name: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', icon: 'üó∫Ô∏è' }
  ];

  res.json({ categories });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
async function checkAndUnlockAchievements(userId: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
    const completedCount = await dbHelpers.countCompletedQuests(userId);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = await dbHelpers.getAllAchievements();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    for (const achievement of achievements) {
      if (achievement.requirement_type === 'quest_count' && 
          completedCount >= achievement.requirement_value) {
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
        const hasAchievement = await dbHelpers.hasUserAchievement(userId, achievement.id);

        if (!hasAchievement) {
          // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
          await dbHelpers.createUserAchievement(userId, achievement.id);
          console.log(`‚ú® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.code}`);
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
  }
}

export default router;

