// Load environment variables FIRST (before any other imports)
import dotenv from 'dotenv';
dotenv.config();

import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import path from 'path';
import { initDatabase } from './database';

// Routes
import authRoutes from './routes/auth';
import userRoutes from './routes/users';
import questRoutes from './routes/quests';

const app = express();
const PORT = process.env.PORT || 3000;

// Initialize database
initDatabase();

// Middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'"],
      fontSrc: ["'self'"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"],
    },
  },
})); // Security headers
app.use(cors({
  origin: process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : [
    'http://localhost:5500', 
    'http://127.0.0.1:5500', 
    'http://localhost:3000', 
    'http://localhost:3001',
    'http://questgo.ru',
    'https://questgo.ru'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Rate limiting
const limiter = rateLimit({
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '60000'), // 1 minute
  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100'), // 100 requests per minute
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
});
app.use('/api/', limiter);

// API Routes (–í–ê–ñ–ù–û: –¥–æ static files!)
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/quests', questRoutes);

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    ai: process.env.GEMINI_API_KEY ? 'Gemini' : 'Fallback'
  });
});

// Backend only serves API routes
// Frontend is served by nginx from frontend container

// Error handling
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('–û—à–∏–±–∫–∞:', err);
  res.status(err.status || 500).json({
    error: err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// Start server
app.listen(Number(PORT), '0.0.0.0', () => {
  console.log('\nüöÄ QuestGO Backend –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:${PORT}/api`);
  console.log(`üåê Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  console.log(`ü§ñ AI: ${process.env.GEMINI_API_KEY ? '‚úÖ Google Gemini –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã)'}`);
  console.log(`üíæ Database: LowDB (JSON —Ñ–∞–π–ª)`);
  console.log(`üìÅ Database path: ${process.env.DATABASE_PATH || path.join(__dirname, '../data/questgo.json')}`);
  console.log(`üìÅ Static files: ${path.join(__dirname, '../../')}`);
  console.log('\nüí° –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API:');
  console.log('   POST   /api/auth/register    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
  console.log('   POST   /api/auth/login       - –í—Ö–æ–¥');
  console.log('   GET    /api/users/me         - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('   PUT    /api/users/me         - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
  console.log('   POST   /api/quests/generate  - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç (Gemini AI)');
  console.log('   GET    /api/quests/history   - –ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤');
  console.log('   POST   /api/quests/:id/complete - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç');
  console.log('   POST   /api/quests/:id/skip  - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–≤–µ—Å—Ç\n');
});

export default app;

